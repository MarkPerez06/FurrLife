@{
    ViewBag.Title = "Consultation";
    ViewBag.pTitle = "Consultation";
    ViewBag.pageTitle = "Video Call";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
<!-- DataTables -->
<link href="~/assets/libs/datatables.net-bs4/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css" />
<link href="~/assets/libs/datatables.net-buttons-bs4/css/buttons.bootstrap4.min.css" rel="stylesheet" type="text/css" />
<!-- Responsive datatable examples -->
<link href="~/assets/libs/datatables.net-responsive-bs4/css/responsive.bootstrap4.min.css" rel="stylesheet" type="text/css" />
<link href="~/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.14/signalr.min.js"></script>


<style>
    #videos {
        display: flex;
        gap: 10px;
    }

    video {
        width: 45%;
        border: 1px solid black;
    }
</style>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div id="videos">
                    <video id="localVideo" autoplay muted playsinline></video>
                    <video id="remoteVideo" autoplay playsinline></video>
                </div>
                <div class="mt-4">
                    <button id="startCall" class="btn btn-primary">Start Call</button>
                    <button id="endCall" class="btn btn-primary">End Call</button>
                </div>
            </div>
        </div>
    </div> <!-- end col -->
</div> <!-- end row -->
<!-- JAVASCRIPT -->
<script src="~/assets/libs/jquery/jquery.min.js"></script>
<script src="~/assets/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/assets/libs/metismenu/metisMenu.min.js"></script>
<script src="~/assets/libs/simplebar/simplebar.min.js"></script>
<script src="~/assets/libs/node-waves/waves.min.js"></script>


<!-- Required datatable js -->
<script src="~/assets/libs/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="~/assets/libs/datatables.net-bs4/js/dataTables.bootstrap4.min.js"></script>
<!-- Buttons examples -->
<script src="~/assets/libs/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
<script src="~/assets/libs/datatables.net-buttons-bs4/js/buttons.bootstrap4.min.js"></script>
<script src="~/assets/libs/jszip/jszip.min.js"></script>
<script src="~/assets/libs/pdfmake/build/pdfmake.min.js"></script>
<script src="~/assets/libs/pdfmake/build/vfs_fonts.js"></script>
<script src="~/assets/libs/datatables.net-buttons/js/buttons.html5.min.js"></script>
<script src="~/assets/libs/datatables.net-buttons/js/buttons.print.min.js"></script>
<script src="~/assets/libs/datatables.net-buttons/js/buttons.colVis.min.js"></script>

<!-- Responsive examples -->
<script src="~/assets/libs/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
<script src="~/assets/libs/datatables.net-responsive-bs4/js/responsive.bootstrap4.min.js"></script>

<!-- Datatable init js -->
<script src="~/assets/js/pages/datatables.init.js"></script>

<!-- App js -->
<script src="~/assets/js/pages/modal.init.js"></script>
<script src="~/assets/libs/parsleyjs/parsley.min.js"></script>
<script src="~/assets/js/pages/form-validation.init.js"></script>
<!-- Sweet Alerts js -->
<script src="~/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<!-- Sweet alert init js-->
<script src="~/assets/js/pages/sweet-alerts.init.js"></script>

<script src="~/assets/js/app.js"></script>

<script>
    const localVideo = document.getElementById("localVideo");
    const remoteVideo = document.getElementById("remoteVideo");
    const startCallButton = document.getElementById("startCall");
    const endCallButton = document.getElementById("endCall");

    let localStream, remoteStream, peerConnection;
    let connectionId, remoteConnectionId;

    const config = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

    // Initialize SignalR
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/consultationHub")
        .build();

    hubConnection.on("ReceiveSignal", async (signal, senderId) => {
        remoteConnectionId = senderId; // Set remote connection ID dynamically
        const data = JSON.parse(signal);

        if (data.offer) {
            await handleOffer(data.offer);
        } else if (data.answer) {
            await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
        } else if (data.candidate) {
            await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
        } else if (data.endCall) {
            endCall(true); // End call triggered by remote peer
        }
    });

    hubConnection.start().then(() => {
        hubConnection.invoke("GetConnectionId").then(id => {
            connectionId = id;
        });
    });

    startCallButton.addEventListener("click", async () => {
        startCallButton.disabled = true;
        endCallButton.disabled = false;

        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;

        peerConnection = new RTCPeerConnection(config);

        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

        peerConnection.ontrack = event => {
            if (!remoteStream) {
                remoteStream = new MediaStream();
                remoteVideo.srcObject = remoteStream;
            }
            remoteStream.addTrack(event.track);
        };

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                sendSignal({ candidate: event.candidate });
            }
        };

        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        sendSignal({ offer });
    });

    endCallButton.addEventListener("click", () => {
        endCall(false);
    });

    function sendSignal(data) {
        hubConnection.invoke("SendSignal", JSON.stringify(data), remoteConnectionId || "");
    }

    function endCall(isRemote = false) {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localVideo.srcObject = null;
        }

        if (remoteStream) {
            remoteStream.getTracks().forEach(track => track.stop());
            remoteVideo.srcObject = null;
        }

        if (!isRemote) {
            sendSignal({ endCall: true });
        }

        startCallButton.disabled = false;
        endCallButton.disabled = true;
        alert("Call ended.");
    }

    async function handleOffer(offer) {
        peerConnection = new RTCPeerConnection(config);

        peerConnection.ontrack = event => {
            if (!remoteStream) {
                remoteStream = new MediaStream();
                remoteVideo.srcObject = remoteStream;
            }
            remoteStream.addTrack(event.track);
        };

        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                sendSignal({ candidate: event.candidate });
            }
        };

        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));

        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;

        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        sendSignal({ answer });
    }
</script>

<script>
    var ID = $("#id").val();

    function convertDateTimeToDate(dateTime) {
        var date = new Date(dateTime);
        var day = date.getDate();
        var month = date.getMonth() + 1; // Months are zero-based
        var year = date.getFullYear();

        // Pad single-digit day and month with leading zeros
        var formattedDay = day < 10 ? '0' + day : day;
        var formattedMonth = month < 10 ? '0' + month : month;
        var formattedDate = year + '-' + formattedMonth + '-' + formattedDay;
        return formattedDate;
    }

    function SaveForm() {
        var data = {
            Id: ID,
            Title: $("#Title").val(),
            Start: $("#Start").val(),
            End: $("#End").val(),
            IsAllDay: $("#IsAllDay").val(),
            UserId: $("#UserId").val()
        };
        if (data.Title != "" && data.Start != "" && data.End != "" && data.UserId != "" && data.IsAllDay != "") {
            $.ajax({
                url: '@Url.Action("Save", "Appointments")',
                type: 'POST',
                data: data,
                success: function (data) {
                    Swal.fire({
                        title: 'Success!',
                        text: 'Record was successfully saved!',
                        icon: 'success',
                        showCancelButton: false,
                        allowOutsideClick: false,
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '@Url.Action("Index", "Appointments")';
                        }
                    });
                },
                error: function (error) {
                    Swal.fire('Oops!', 'Something went wrong!', 'error');
                }
            });
        }
    }

    function Create() {
        ID = 0;
        $("#ModalTitle").text("Create Appointments").trigger("change");
    }
    function Edit(Id) {
        $("#ModalTitle").text("Update Appointments").trigger("change");

        ID = Id;
        var data = {
            Id: Id,
        };
        if (data.Title != "" && data.Start != "" && data.End != "" && data.UserId != "" && data.IsAllDay != "") {
            $.ajax({
                url: '@Url.Action("Edit", "Appointments")',
                type: 'POST',
                data: data,
                dataType: 'json',
                success: function (result) {
                    $("#Id").val(Id).trigger("change");
                    $("#Title").val(result.title).trigger("change");
                    $("#Start").val(result.start).trigger("change");
                    $("#End").val(result.end).trigger("change");
                    $("#IsAllDay").val(result.isAllDay).trigger("change");
                    $("#UserId").val(result.userId).trigger("change");
                },
                error: function (error) {
                    Swal.fire('Oops!', 'Something went wrong!', 'error');
                }
            });
        }
    }
    function Delete(Id) {
        ID = Id;
        var data = {
            Id: Id,
        };

        Swal.fire({
            title: 'Are you sure?',
            text: 'You won\'t be able to revert this!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel',
            allowOutsideClick: false,
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("Delete", "Appointments")',
                    type: 'POST',
                    data: data,
                    success: function (data) {
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'Record was successfully deleted!',
                            icon: 'success',
                            showCancelButton: false,
                            allowOutsideClick: false,
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '@Url.Action("Index", "Appointments")';
                            }
                        });
                    },
                    error: function (error) {
                        Swal.fire('Oops!', 'Something went wrong!', 'error');
                    }
                });

            } else if (result.dismiss === Swal.DismissReason.cancel) {
                Swal.fire('Cancelled!', 'Your record is safe!', 'error');
            }
        });
    }
</script>
